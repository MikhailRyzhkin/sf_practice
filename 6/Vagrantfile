# -*- mode: ruby -*-
# vi: set ft=ruby :

# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.
Vagrant.configure("2") do |config|
  # The most common configuration options are documented and commented below.
  # For a complete reference, please see the online documentation at
  # https://docs.vagrantup.com.

  # Every Vagrant development environment requires a box. You can search for
  # boxes at https://vagrantcloud.com/search.
  # Используем исходный имидж-бокс bento/ubuntu-18.04 и указываем название машины и её хостнейм
  config.vm.box = "bento/ubuntu-18.04"
  config.vm.define "Ubuntu_server_18.04_Python"
  config.vm.hostname = "ubuntu-python.local"

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine and only allow access
  # via 127.0.0.1 to disable public access
  # config.vm.network "forwarded_port", guest: 80, host: 8080, host_ip: "127.0.0.1"
  config.vm.network "forwarded_port", id: "ssh", host_ip: "127.0.0.1", guest: 22, host: 22222
  
  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  # Пробрасываем поддиректорию проекта на хосте /data_scripts с файлами и скриптами в директорию /vagrant_data_scripts в созадваемой ВМ
  config.vm.synced_folder "./data_scripts", "/vagrant_data_scripts"

  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  # Example for VirtualBox:
  # Используем провайдера - virtualbox, отключаем последовательный порт для избежания ошибок
  config.vm.provider "virtualbox" do |vb|
    vb.customize [ "modifyvm", :id, "--uartmode1", "disconnected" ]
  end
 
  # Enable provisioning with a shell script. Additional provisioners such as
  # Ansible, Chef, Docker, Puppet and Salt are also available. Please see the
  # documentation for more information about their specific syntax and use.
  # Пробрасываем ключ для подключения по ssh, перечитываем репозитории и обновляемся, делаем скрипт исполняемым
  config.vm.provision "shell" do |s|
    ssh_pub_key = File.readlines("#{Dir.home}/.ssh/mikhail-skillfactory.pub").first.strip
    s.inline = <<-SHELL
    echo #{ssh_pub_key} >> /home/vagrant/.ssh/authorized_keys
    echo #{ssh_pub_key} >> /root/.ssh/authorized_keys
    sudo apt-get update && sudo apt-get upgrade -y
    cd /vagrant_data_scripts && chmod +x python-pip.sh
    SHELL
  end

  # Запускаем скрипт установки python пакетов
  config.vm.provision "shell", path: "/vagrant_data_scripts/python-pip.sh"
end
